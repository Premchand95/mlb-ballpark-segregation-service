// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Scheduler views
//
// Command:
// $ goa gen
// github.com/mlb/mlb-ballpark-segregation-service/front_service/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Schedule is the viewed result type that is projected based on a view.
type Schedule struct {
	// Type to project
	Projected *ScheduleView
	// View to render
	View string
}

// ScheduleView is a type that runs validations on a projected type.
type ScheduleView struct {
	// mlb copyright for this service.
	Copyright *string
	// total items in a day
	TotalItems *uint
	// total events in a day
	TotalEvents *uint
	// total games in a day
	TotalGames *uint
	// total games in progress
	TotalGamesInProgress *uint
	// List of dates with detailed schedule of games.
	Dates []*DateView
}

// DateView is a type that runs validations on a projected type.
type DateView struct {
	// official date of the game
	Date *string
	// total items in a day
	TotalItems *uint
	// total events in a day
	TotalEvents *uint
	// total games in a day
	TotalGames *uint
	// total games in progress
	TotalGamesInProgress *uint
	// list of games on this date
	Games []*GameView
	// list of events on this date
	Events []interface{}
}

// GameView is a type that runs validations on a projected type.
type GameView struct {
	// Unique identifier for the game
	GamePk *uint64
	// live feed link for the game
	Link *string
	// type of the game
	GameType *string
	// season of the game
	Season *string
	// date of the game
	GameDate *string
	// official date of the game
	OfficialDate *string
	// status details of the game
	Status *StatusView
	// details of the two teams of a game
	Teams *TeamsView
	// venue of the game
	Venue *VenueView
	// content of the game
	Content *ContentView
	// is it tie game
	IsTie *bool
	// game number
	GameNumber *uint
	// is game public facing
	PublicFacing *bool
	// double header situation
	DoubleHeader *string
	// type of the game day
	GamedayType *string
	// tie breaker
	Tiebreaker *string
	// game calender event id
	CalendarEventID *string
	// game season display
	SeasonDisplay *string
	// is game day or night
	DayNight *string
	// scheduled innings of the game
	ScheduledInnings *uint
	// reverse home status of the game
	ReverseHomeAwayStatus *bool
	// inning Break Length of the game
	InningBreakLength *uint
	// game In series
	GamesInSeries *uint
	// series Number of the game
	SeriesGameNumber *uint
	// series description of the game
	SeriesDescription *string
	// record source of the game
	RecordSource *string
	// is necessary
	IfNecessary *string
	// description of the game
	IfNecessaryDescription *string
}

// StatusView is a type that runs validations on a projected type.
type StatusView struct {
	// abstract state of the game
	AbstractGameState *string
	// coded game of the game
	CodedGameState *string
	// detailed state of the game
	DetailedState *string
	// status code of the game
	StatusCode *string
	// start time to be determined for this game
	StartTimeTBD *bool
	// abstract code of the game
	AbstractGameCode *string
}

// TeamsView is a type that runs validations on a projected type.
type TeamsView struct {
	// non home team information
	Away *TeamInfoView
	// home team information
	Home *TeamInfoView
}

// TeamInfoView is a type that runs validations on a projected type.
type TeamInfoView struct {
	// score of the team
	Score *uint
	// is this team won this game
	IsWinner *bool
	// splitSquad for the team
	SplitSquad *bool
	// seriesNumber for the team
	SeriesNumber *uint
	// leagueRecord of the team
	LeagueRecord *LeagueRecordView
	// team basic information
	Team *TeamView
}

// LeagueRecordView is a type that runs validations on a projected type.
type LeagueRecordView struct {
	// Number of wins
	Wins *uint
	// Number of losses
	Losses *uint
	// win percentage. no of wins/total no of matches
	Pct *string
}

// TeamView is a type that runs validations on a projected type.
type TeamView struct {
	// unique team identifier
	ID *uint
	// team name
	Name *string
	// rest show endpoint to get team details
	Link *string
}

// VenueView is a type that runs validations on a projected type.
type VenueView struct {
	// unique Venue identifier
	ID *uint
	// Venue name
	Name *string
	// rest show endpoint to get Venue details
	Link *string
}

// ContentView is a type that runs validations on a projected type.
type ContentView struct {
	// rest show endpoint to get Content details
	Link *string
}

var (
	// ScheduleMap is a map indexing the attribute names of Schedule by view name.
	ScheduleMap = map[string][]string{
		"default": {
			"copyright",
			"totalItems",
			"totalEvents",
			"totalGames",
			"totalGamesInProgress",
			"dates",
		},
	}
)

// ValidateSchedule runs the validations defined on the viewed result type
// Schedule.
func ValidateSchedule(result *Schedule) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateScheduleView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateScheduleView runs the validations defined on ScheduleView using the
// "default" view.
func ValidateScheduleView(result *ScheduleView) (err error) {
	for _, e := range result.Dates {
		if e != nil {
			if err2 := ValidateDateView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDateView runs the validations defined on DateView.
func ValidateDateView(result *DateView) (err error) {
	if result.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.date", *result.Date, goa.FormatDate))
	}
	for _, e := range result.Games {
		if e != nil {
			if err2 := ValidateGameView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGameView runs the validations defined on GameView.
func ValidateGameView(result *GameView) (err error) {
	if result.GameDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.gameDate", *result.GameDate, goa.FormatDateTime))
	}
	if result.OfficialDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.officialDate", *result.OfficialDate, goa.FormatDate))
	}
	return
}

// ValidateStatusView runs the validations defined on StatusView.
func ValidateStatusView(result *StatusView) (err error) {

	return
}

// ValidateTeamsView runs the validations defined on TeamsView.
func ValidateTeamsView(result *TeamsView) (err error) {

	return
}

// ValidateTeamInfoView runs the validations defined on TeamInfoView.
func ValidateTeamInfoView(result *TeamInfoView) (err error) {

	return
}

// ValidateLeagueRecordView runs the validations defined on LeagueRecordView.
func ValidateLeagueRecordView(result *LeagueRecordView) (err error) {

	return
}

// ValidateTeamView runs the validations defined on TeamView.
func ValidateTeamView(result *TeamView) (err error) {

	return
}

// ValidateVenueView runs the validations defined on VenueView.
func ValidateVenueView(result *VenueView) (err error) {

	return
}

// ValidateContentView runs the validations defined on ContentView.
func ValidateContentView(result *ContentView) (err error) {

	return
}
