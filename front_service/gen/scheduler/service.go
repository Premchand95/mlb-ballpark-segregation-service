// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Scheduler service
//
// Command:
// $ goa gen
// github.com/mlb/mlb-ballpark-segregation-service/front_service/design

package scheduler

import (
	"context"

	schedulerviews "github.com/mlb/mlb-ballpark-segregation-service/front_service/gen/scheduler/views"
	goa "goa.design/goa/v3/pkg"
)

// Scheduler service acts as a single source of truth for consumers to get a
// custom sorted schedule of games.
type Service interface {
	// Retrieves a schedule of games
	Index(context.Context, *IndexPayload) (res *Schedule, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Scheduler"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"index"}

type Content struct {
	// rest show endpoint to get Content details
	Link *string
}

type Date struct {
	// official date of the game
	Date *string
	// total items in a day
	TotalItems *uint
	// total events in a day
	TotalEvents *uint
	// total games in a day
	TotalGames *uint
	// total games in progress
	TotalGamesInProgress *uint
	// list of games on this date
	Games []*Game
	// list of events on this date
	Events []interface{}
}

type Game struct {
	// Unique identifier for the game
	GamePk *uint64
	// live feed link for the game
	Link *string
	// type of the game
	GameType *string
	// season of the game
	Season *string
	// date of the game
	GameDate *string
	// official date of the game
	OfficialDate *string
	// status details of the game
	Status *Status
	// details of the two teams of a game
	Teams *Teams
	// venue of the game
	Venue *Venue
	// content of the game
	Content *Content
	// is it tie game
	IsTie *bool
	// game number
	GameNumber *uint
	// is game public facing
	PublicFacing *bool
	// double header situation
	DoubleHeader *string
	// type of the game day
	GamedayType *string
	// tie breaker
	Tiebreaker *string
	// game calender event id
	CalendarEventID *string
	// game season display
	SeasonDisplay *string
	// is game day or night
	DayNight *string
	// scheduled innings of the game
	ScheduledInnings *uint
	// reverse home status of the game
	ReverseHomeAwayStatus *bool
	// inning Break Length of the game
	InningBreakLength *uint
	// game In series
	GamesInSeries *uint
	// series Number of the game
	SeriesGameNumber *uint
	// series description of the game
	SeriesDescription *string
	// record source of the game
	RecordSource *string
	// is necessary
	IfNecessary *string
	// description of the game
	IfNecessaryDescription *string
}

// IndexPayload is the payload type of the Scheduler service index method.
type IndexPayload struct {
	// The unique identifier of the team
	ID uint
	// The date (YYYY-mm-dd) used to get all games scheduled on that day
	Date string
}

type LeagueRecord struct {
	// Number of wins
	Wins *uint
	// Number of losses
	Losses *uint
	// win percentage. no of wins/total no of matches
	Pct *string
}

// Schedule is the result type of the Scheduler service index method.
type Schedule struct {
	// mlb copyright for this service.
	Copyright *string
	// total items in a day
	TotalItems *uint
	// total events in a day
	TotalEvents *uint
	// total games in a day
	TotalGames *uint
	// total games in progress
	TotalGamesInProgress *uint
	// List of dates with detailed schedule of games.
	Dates []*Date
}

type Status struct {
	// abstract state of the game
	AbstractGameState *string
	// coded game of the game
	CodedGameState *string
	// detailed state of the game
	DetailedState *string
	// status code of the game
	StatusCode *string
	// start time to be determined for this game
	StartTimeTBD *bool
	// abstract code of the game
	AbstractGameCode *string
}

type Team struct {
	// unique team identifier
	ID *uint
	// team name
	Name *string
	// rest show endpoint to get team details
	Link *string
}

type TeamInfo struct {
	// score of the team
	Score *uint
	// is this team won this game
	IsWinner *bool
	// splitSquad for the team
	SplitSquad *bool
	// seriesNumber for the team
	SeriesNumber *uint
	// leagueRecord of the team
	LeagueRecord *LeagueRecord
	// team basic information
	Team *Team
}

type Teams struct {
	// non home team information
	Away *TeamInfo
	// home team information
	Home *TeamInfo
}

type Venue struct {
	// unique Venue identifier
	ID *uint
	// Venue name
	Name *string
	// rest show endpoint to get Venue details
	Link *string
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal_error", false, false, false)
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_gateway", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewSchedule initializes result type Schedule from viewed result type
// Schedule.
func NewSchedule(vres *schedulerviews.Schedule) *Schedule {
	return newSchedule(vres.Projected)
}

// NewViewedSchedule initializes viewed result type Schedule from result type
// Schedule using the given view.
func NewViewedSchedule(res *Schedule, view string) *schedulerviews.Schedule {
	p := newScheduleView(res)
	return &schedulerviews.Schedule{Projected: p, View: "default"}
}

// newSchedule converts projected type Schedule to service type Schedule.
func newSchedule(vres *schedulerviews.ScheduleView) *Schedule {
	res := &Schedule{
		Copyright:            vres.Copyright,
		TotalItems:           vres.TotalItems,
		TotalEvents:          vres.TotalEvents,
		TotalGames:           vres.TotalGames,
		TotalGamesInProgress: vres.TotalGamesInProgress,
	}
	if vres.Dates != nil {
		res.Dates = make([]*Date, len(vres.Dates))
		for i, val := range vres.Dates {
			res.Dates[i] = transformSchedulerviewsDateViewToDate(val)
		}
	}
	return res
}

// newScheduleView projects result type Schedule to projected type ScheduleView
// using the "default" view.
func newScheduleView(res *Schedule) *schedulerviews.ScheduleView {
	vres := &schedulerviews.ScheduleView{
		Copyright:            res.Copyright,
		TotalItems:           res.TotalItems,
		TotalEvents:          res.TotalEvents,
		TotalGames:           res.TotalGames,
		TotalGamesInProgress: res.TotalGamesInProgress,
	}
	if res.Dates != nil {
		vres.Dates = make([]*schedulerviews.DateView, len(res.Dates))
		for i, val := range res.Dates {
			vres.Dates[i] = transformDateToSchedulerviewsDateView(val)
		}
	}
	return vres
}

// transformSchedulerviewsDateViewToDate builds a value of type *Date from a
// value of type *schedulerviews.DateView.
func transformSchedulerviewsDateViewToDate(v *schedulerviews.DateView) *Date {
	if v == nil {
		return nil
	}
	res := &Date{
		Date:                 v.Date,
		TotalItems:           v.TotalItems,
		TotalEvents:          v.TotalEvents,
		TotalGames:           v.TotalGames,
		TotalGamesInProgress: v.TotalGamesInProgress,
	}
	if v.Games != nil {
		res.Games = make([]*Game, len(v.Games))
		for i, val := range v.Games {
			res.Games[i] = transformSchedulerviewsGameViewToGame(val)
		}
	}
	if v.Events != nil {
		res.Events = make([]interface{}, len(v.Events))
		for i, val := range v.Events {
			res.Events[i] = val
		}
	}

	return res
}

// transformSchedulerviewsGameViewToGame builds a value of type *Game from a
// value of type *schedulerviews.GameView.
func transformSchedulerviewsGameViewToGame(v *schedulerviews.GameView) *Game {
	if v == nil {
		return nil
	}
	res := &Game{
		GamePk:                 v.GamePk,
		Link:                   v.Link,
		GameType:               v.GameType,
		Season:                 v.Season,
		GameDate:               v.GameDate,
		OfficialDate:           v.OfficialDate,
		IsTie:                  v.IsTie,
		GameNumber:             v.GameNumber,
		PublicFacing:           v.PublicFacing,
		DoubleHeader:           v.DoubleHeader,
		GamedayType:            v.GamedayType,
		Tiebreaker:             v.Tiebreaker,
		CalendarEventID:        v.CalendarEventID,
		SeasonDisplay:          v.SeasonDisplay,
		DayNight:               v.DayNight,
		ScheduledInnings:       v.ScheduledInnings,
		ReverseHomeAwayStatus:  v.ReverseHomeAwayStatus,
		InningBreakLength:      v.InningBreakLength,
		GamesInSeries:          v.GamesInSeries,
		SeriesGameNumber:       v.SeriesGameNumber,
		SeriesDescription:      v.SeriesDescription,
		RecordSource:           v.RecordSource,
		IfNecessary:            v.IfNecessary,
		IfNecessaryDescription: v.IfNecessaryDescription,
	}
	if v.Status != nil {
		res.Status = transformSchedulerviewsStatusViewToStatus(v.Status)
	}
	if v.Teams != nil {
		res.Teams = transformSchedulerviewsTeamsViewToTeams(v.Teams)
	}
	if v.Venue != nil {
		res.Venue = transformSchedulerviewsVenueViewToVenue(v.Venue)
	}
	if v.Content != nil {
		res.Content = transformSchedulerviewsContentViewToContent(v.Content)
	}

	return res
}

// transformSchedulerviewsStatusViewToStatus builds a value of type *Status
// from a value of type *schedulerviews.StatusView.
func transformSchedulerviewsStatusViewToStatus(v *schedulerviews.StatusView) *Status {
	if v == nil {
		return nil
	}
	res := &Status{
		AbstractGameState: v.AbstractGameState,
		CodedGameState:    v.CodedGameState,
		DetailedState:     v.DetailedState,
		StatusCode:        v.StatusCode,
		StartTimeTBD:      v.StartTimeTBD,
		AbstractGameCode:  v.AbstractGameCode,
	}

	return res
}

// transformSchedulerviewsTeamsViewToTeams builds a value of type *Teams from a
// value of type *schedulerviews.TeamsView.
func transformSchedulerviewsTeamsViewToTeams(v *schedulerviews.TeamsView) *Teams {
	if v == nil {
		return nil
	}
	res := &Teams{}
	if v.Away != nil {
		res.Away = transformSchedulerviewsTeamInfoViewToTeamInfo(v.Away)
	}
	if v.Home != nil {
		res.Home = transformSchedulerviewsTeamInfoViewToTeamInfo(v.Home)
	}

	return res
}

// transformSchedulerviewsTeamInfoViewToTeamInfo builds a value of type
// *TeamInfo from a value of type *schedulerviews.TeamInfoView.
func transformSchedulerviewsTeamInfoViewToTeamInfo(v *schedulerviews.TeamInfoView) *TeamInfo {
	if v == nil {
		return nil
	}
	res := &TeamInfo{
		Score:        v.Score,
		IsWinner:     v.IsWinner,
		SplitSquad:   v.SplitSquad,
		SeriesNumber: v.SeriesNumber,
	}
	if v.LeagueRecord != nil {
		res.LeagueRecord = transformSchedulerviewsLeagueRecordViewToLeagueRecord(v.LeagueRecord)
	}
	if v.Team != nil {
		res.Team = transformSchedulerviewsTeamViewToTeam(v.Team)
	}

	return res
}

// transformSchedulerviewsLeagueRecordViewToLeagueRecord builds a value of type
// *LeagueRecord from a value of type *schedulerviews.LeagueRecordView.
func transformSchedulerviewsLeagueRecordViewToLeagueRecord(v *schedulerviews.LeagueRecordView) *LeagueRecord {
	if v == nil {
		return nil
	}
	res := &LeagueRecord{
		Wins:   v.Wins,
		Losses: v.Losses,
		Pct:    v.Pct,
	}

	return res
}

// transformSchedulerviewsTeamViewToTeam builds a value of type *Team from a
// value of type *schedulerviews.TeamView.
func transformSchedulerviewsTeamViewToTeam(v *schedulerviews.TeamView) *Team {
	if v == nil {
		return nil
	}
	res := &Team{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// transformSchedulerviewsVenueViewToVenue builds a value of type *Venue from a
// value of type *schedulerviews.VenueView.
func transformSchedulerviewsVenueViewToVenue(v *schedulerviews.VenueView) *Venue {
	if v == nil {
		return nil
	}
	res := &Venue{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// transformSchedulerviewsContentViewToContent builds a value of type *Content
// from a value of type *schedulerviews.ContentView.
func transformSchedulerviewsContentViewToContent(v *schedulerviews.ContentView) *Content {
	if v == nil {
		return nil
	}
	res := &Content{
		Link: v.Link,
	}

	return res
}

// transformDateToSchedulerviewsDateView builds a value of type
// *schedulerviews.DateView from a value of type *Date.
func transformDateToSchedulerviewsDateView(v *Date) *schedulerviews.DateView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.DateView{
		Date:                 v.Date,
		TotalItems:           v.TotalItems,
		TotalEvents:          v.TotalEvents,
		TotalGames:           v.TotalGames,
		TotalGamesInProgress: v.TotalGamesInProgress,
	}
	if v.Games != nil {
		res.Games = make([]*schedulerviews.GameView, len(v.Games))
		for i, val := range v.Games {
			res.Games[i] = transformGameToSchedulerviewsGameView(val)
		}
	}
	if v.Events != nil {
		res.Events = make([]interface{}, len(v.Events))
		for i, val := range v.Events {
			res.Events[i] = val
		}
	}

	return res
}

// transformGameToSchedulerviewsGameView builds a value of type
// *schedulerviews.GameView from a value of type *Game.
func transformGameToSchedulerviewsGameView(v *Game) *schedulerviews.GameView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.GameView{
		GamePk:                 v.GamePk,
		Link:                   v.Link,
		GameType:               v.GameType,
		Season:                 v.Season,
		GameDate:               v.GameDate,
		OfficialDate:           v.OfficialDate,
		IsTie:                  v.IsTie,
		GameNumber:             v.GameNumber,
		PublicFacing:           v.PublicFacing,
		DoubleHeader:           v.DoubleHeader,
		GamedayType:            v.GamedayType,
		Tiebreaker:             v.Tiebreaker,
		CalendarEventID:        v.CalendarEventID,
		SeasonDisplay:          v.SeasonDisplay,
		DayNight:               v.DayNight,
		ScheduledInnings:       v.ScheduledInnings,
		ReverseHomeAwayStatus:  v.ReverseHomeAwayStatus,
		InningBreakLength:      v.InningBreakLength,
		GamesInSeries:          v.GamesInSeries,
		SeriesGameNumber:       v.SeriesGameNumber,
		SeriesDescription:      v.SeriesDescription,
		RecordSource:           v.RecordSource,
		IfNecessary:            v.IfNecessary,
		IfNecessaryDescription: v.IfNecessaryDescription,
	}
	if v.Status != nil {
		res.Status = transformStatusToSchedulerviewsStatusView(v.Status)
	}
	if v.Teams != nil {
		res.Teams = transformTeamsToSchedulerviewsTeamsView(v.Teams)
	}
	if v.Venue != nil {
		res.Venue = transformVenueToSchedulerviewsVenueView(v.Venue)
	}
	if v.Content != nil {
		res.Content = transformContentToSchedulerviewsContentView(v.Content)
	}

	return res
}

// transformStatusToSchedulerviewsStatusView builds a value of type
// *schedulerviews.StatusView from a value of type *Status.
func transformStatusToSchedulerviewsStatusView(v *Status) *schedulerviews.StatusView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.StatusView{
		AbstractGameState: v.AbstractGameState,
		CodedGameState:    v.CodedGameState,
		DetailedState:     v.DetailedState,
		StatusCode:        v.StatusCode,
		StartTimeTBD:      v.StartTimeTBD,
		AbstractGameCode:  v.AbstractGameCode,
	}

	return res
}

// transformTeamsToSchedulerviewsTeamsView builds a value of type
// *schedulerviews.TeamsView from a value of type *Teams.
func transformTeamsToSchedulerviewsTeamsView(v *Teams) *schedulerviews.TeamsView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamsView{}
	if v.Away != nil {
		res.Away = transformTeamInfoToSchedulerviewsTeamInfoView(v.Away)
	}
	if v.Home != nil {
		res.Home = transformTeamInfoToSchedulerviewsTeamInfoView(v.Home)
	}

	return res
}

// transformTeamInfoToSchedulerviewsTeamInfoView builds a value of type
// *schedulerviews.TeamInfoView from a value of type *TeamInfo.
func transformTeamInfoToSchedulerviewsTeamInfoView(v *TeamInfo) *schedulerviews.TeamInfoView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamInfoView{
		Score:        v.Score,
		IsWinner:     v.IsWinner,
		SplitSquad:   v.SplitSquad,
		SeriesNumber: v.SeriesNumber,
	}
	if v.LeagueRecord != nil {
		res.LeagueRecord = transformLeagueRecordToSchedulerviewsLeagueRecordView(v.LeagueRecord)
	}
	if v.Team != nil {
		res.Team = transformTeamToSchedulerviewsTeamView(v.Team)
	}

	return res
}

// transformLeagueRecordToSchedulerviewsLeagueRecordView builds a value of type
// *schedulerviews.LeagueRecordView from a value of type *LeagueRecord.
func transformLeagueRecordToSchedulerviewsLeagueRecordView(v *LeagueRecord) *schedulerviews.LeagueRecordView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.LeagueRecordView{
		Wins:   v.Wins,
		Losses: v.Losses,
		Pct:    v.Pct,
	}

	return res
}

// transformTeamToSchedulerviewsTeamView builds a value of type
// *schedulerviews.TeamView from a value of type *Team.
func transformTeamToSchedulerviewsTeamView(v *Team) *schedulerviews.TeamView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamView{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// transformVenueToSchedulerviewsVenueView builds a value of type
// *schedulerviews.VenueView from a value of type *Venue.
func transformVenueToSchedulerviewsVenueView(v *Venue) *schedulerviews.VenueView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.VenueView{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// transformContentToSchedulerviewsContentView builds a value of type
// *schedulerviews.ContentView from a value of type *Content.
func transformContentToSchedulerviewsContentView(v *Content) *schedulerviews.ContentView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.ContentView{
		Link: v.Link,
	}

	return res
}
