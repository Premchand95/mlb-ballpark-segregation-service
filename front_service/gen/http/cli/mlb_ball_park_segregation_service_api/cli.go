// Code generated by goa v3.8.2, DO NOT EDIT.
//
// MLB BallPark Segregation Service API HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/mlb/mlb-ballpark-segregation-service/front_service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	schedulerc "github.com/mlb/mlb-ballpark-segregation-service/front_service/gen/http/scheduler/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `scheduler index
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` scheduler index --id 120 --date "2022-08-10"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		schedulerFlags = flag.NewFlagSet("scheduler", flag.ContinueOnError)

		schedulerIndexFlags    = flag.NewFlagSet("index", flag.ExitOnError)
		schedulerIndexIDFlag   = schedulerIndexFlags.String("id", "REQUIRED", "The unique identifier of the team")
		schedulerIndexDateFlag = schedulerIndexFlags.String("date", "REQUIRED", "")
	)
	schedulerFlags.Usage = schedulerUsage
	schedulerIndexFlags.Usage = schedulerIndexUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "scheduler":
			svcf = schedulerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "scheduler":
			switch epn {
			case "index":
				epf = schedulerIndexFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "scheduler":
			c := schedulerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "index":
				endpoint = c.Index()
				data, err = schedulerc.BuildIndexPayload(*schedulerIndexIDFlag, *schedulerIndexDateFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// schedulerUsage displays the usage of the scheduler command and its
// subcommands.
func schedulerUsage() {
	fmt.Fprintf(os.Stderr, `Scheduler service acts as a single source of truth for consumers to get a custom sorted schedule of games.
Usage:
    %[1]s [globalflags] scheduler COMMAND [flags]

COMMAND:
    index: Retrieves a schedule of games

Additional help:
    %[1]s scheduler COMMAND --help
`, os.Args[0])
}
func schedulerIndexUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] scheduler index -id UINT -date STRING

Retrieves a schedule of games
    -id UINT: The unique identifier of the team
    -date STRING: 

Example:
    %[1]s scheduler index --id 120 --date "2022-08-10"
`, os.Args[0])
}
