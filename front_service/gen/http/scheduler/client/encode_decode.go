// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Scheduler HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/mlb/mlb-ballpark-segregation-service/front_service/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	scheduler "github.com/mlb/mlb-ballpark-segregation-service/front_service/gen/scheduler"
	schedulerviews "github.com/mlb/mlb-ballpark-segregation-service/front_service/gen/scheduler/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "Scheduler" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*scheduler.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Scheduler", "index", "*scheduler.IndexPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexSchedulerPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Scheduler", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the Scheduler
// index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*scheduler.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("Scheduler", "index", "*scheduler.IndexPayload", v)
		}
		values := req.URL.Query()
		values.Add("date", p.Date)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// Scheduler index endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Scheduler", "index", err)
			}
			p := NewIndexScheduleOK(&body)
			view := "default"
			vres := &schedulerviews.Schedule{Projected: p, View: view}
			if err = schedulerviews.ValidateSchedule(vres); err != nil {
				return nil, goahttp.ErrValidationError("Scheduler", "index", err)
			}
			res := scheduler.NewSchedule(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Scheduler", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Scheduler", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Scheduler", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Scheduler", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Scheduler", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Scheduler", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusNotFound:
			var (
				body IndexNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Scheduler", "index", err)
			}
			err = ValidateIndexNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Scheduler", "index", err)
			}
			return nil, NewIndexNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Scheduler", "index", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDateResponseBodyToSchedulerviewsDateView builds a value of type
// *schedulerviews.DateView from a value of type *DateResponseBody.
func unmarshalDateResponseBodyToSchedulerviewsDateView(v *DateResponseBody) *schedulerviews.DateView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.DateView{
		Date:                 v.Date,
		TotalItems:           v.TotalItems,
		TotalEvents:          v.TotalEvents,
		TotalGames:           v.TotalGames,
		TotalGamesInProgress: v.TotalGamesInProgress,
	}
	res.Games = make([]*schedulerviews.GameView, len(v.Games))
	for i, val := range v.Games {
		res.Games[i] = unmarshalGameResponseBodyToSchedulerviewsGameView(val)
	}
	res.Events = make([]interface{}, len(v.Events))
	for i, val := range v.Events {
		res.Events[i] = val
	}

	return res
}

// unmarshalGameResponseBodyToSchedulerviewsGameView builds a value of type
// *schedulerviews.GameView from a value of type *GameResponseBody.
func unmarshalGameResponseBodyToSchedulerviewsGameView(v *GameResponseBody) *schedulerviews.GameView {
	res := &schedulerviews.GameView{
		GamePk:                 v.GamePk,
		Link:                   v.Link,
		GameType:               v.GameType,
		Season:                 v.Season,
		GameDate:               v.GameDate,
		OfficialDate:           v.OfficialDate,
		IsTie:                  v.IsTie,
		GameNumber:             v.GameNumber,
		PublicFacing:           v.PublicFacing,
		DoubleHeader:           v.DoubleHeader,
		GamedayType:            v.GamedayType,
		Tiebreaker:             v.Tiebreaker,
		CalendarEventID:        v.CalendarEventID,
		SeasonDisplay:          v.SeasonDisplay,
		DayNight:               v.DayNight,
		ScheduledInnings:       v.ScheduledInnings,
		ReverseHomeAwayStatus:  v.ReverseHomeAwayStatus,
		InningBreakLength:      v.InningBreakLength,
		GamesInSeries:          v.GamesInSeries,
		SeriesGameNumber:       v.SeriesGameNumber,
		SeriesDescription:      v.SeriesDescription,
		RecordSource:           v.RecordSource,
		IfNecessary:            v.IfNecessary,
		IfNecessaryDescription: v.IfNecessaryDescription,
	}
	if v.Status != nil {
		res.Status = unmarshalStatusResponseBodyToSchedulerviewsStatusView(v.Status)
	}
	if v.Teams != nil {
		res.Teams = unmarshalTeamsResponseBodyToSchedulerviewsTeamsView(v.Teams)
	}
	if v.Venue != nil {
		res.Venue = unmarshalVenueResponseBodyToSchedulerviewsVenueView(v.Venue)
	}
	if v.Content != nil {
		res.Content = unmarshalContentResponseBodyToSchedulerviewsContentView(v.Content)
	}

	return res
}

// unmarshalStatusResponseBodyToSchedulerviewsStatusView builds a value of type
// *schedulerviews.StatusView from a value of type *StatusResponseBody.
func unmarshalStatusResponseBodyToSchedulerviewsStatusView(v *StatusResponseBody) *schedulerviews.StatusView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.StatusView{
		AbstractGameState: v.AbstractGameState,
		CodedGameState:    v.CodedGameState,
		DetailedState:     v.DetailedState,
		StatusCode:        v.StatusCode,
		StartTimeTBD:      v.StartTimeTBD,
		AbstractGameCode:  v.AbstractGameCode,
	}

	return res
}

// unmarshalTeamsResponseBodyToSchedulerviewsTeamsView builds a value of type
// *schedulerviews.TeamsView from a value of type *TeamsResponseBody.
func unmarshalTeamsResponseBodyToSchedulerviewsTeamsView(v *TeamsResponseBody) *schedulerviews.TeamsView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamsView{}
	if v.Away != nil {
		res.Away = unmarshalTeamInfoResponseBodyToSchedulerviewsTeamInfoView(v.Away)
	}
	if v.Home != nil {
		res.Home = unmarshalTeamInfoResponseBodyToSchedulerviewsTeamInfoView(v.Home)
	}

	return res
}

// unmarshalTeamInfoResponseBodyToSchedulerviewsTeamInfoView builds a value of
// type *schedulerviews.TeamInfoView from a value of type *TeamInfoResponseBody.
func unmarshalTeamInfoResponseBodyToSchedulerviewsTeamInfoView(v *TeamInfoResponseBody) *schedulerviews.TeamInfoView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamInfoView{
		Score:        v.Score,
		IsWinner:     v.IsWinner,
		SplitSquad:   v.SplitSquad,
		SeriesNumber: v.SeriesNumber,
	}
	if v.LeagueRecord != nil {
		res.LeagueRecord = unmarshalLeagueRecordResponseBodyToSchedulerviewsLeagueRecordView(v.LeagueRecord)
	}
	if v.Team != nil {
		res.Team = unmarshalTeamResponseBodyToSchedulerviewsTeamView(v.Team)
	}

	return res
}

// unmarshalLeagueRecordResponseBodyToSchedulerviewsLeagueRecordView builds a
// value of type *schedulerviews.LeagueRecordView from a value of type
// *LeagueRecordResponseBody.
func unmarshalLeagueRecordResponseBodyToSchedulerviewsLeagueRecordView(v *LeagueRecordResponseBody) *schedulerviews.LeagueRecordView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.LeagueRecordView{
		Wins:   v.Wins,
		Losses: v.Losses,
		Pct:    v.Pct,
	}

	return res
}

// unmarshalTeamResponseBodyToSchedulerviewsTeamView builds a value of type
// *schedulerviews.TeamView from a value of type *TeamResponseBody.
func unmarshalTeamResponseBodyToSchedulerviewsTeamView(v *TeamResponseBody) *schedulerviews.TeamView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.TeamView{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// unmarshalVenueResponseBodyToSchedulerviewsVenueView builds a value of type
// *schedulerviews.VenueView from a value of type *VenueResponseBody.
func unmarshalVenueResponseBodyToSchedulerviewsVenueView(v *VenueResponseBody) *schedulerviews.VenueView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.VenueView{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// unmarshalContentResponseBodyToSchedulerviewsContentView builds a value of
// type *schedulerviews.ContentView from a value of type *ContentResponseBody.
func unmarshalContentResponseBodyToSchedulerviewsContentView(v *ContentResponseBody) *schedulerviews.ContentView {
	if v == nil {
		return nil
	}
	res := &schedulerviews.ContentView{
		Link: v.Link,
	}

	return res
}
