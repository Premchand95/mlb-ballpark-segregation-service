// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Scheduler HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/mlb/mlb-ballpark-segregation-service/front_service/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strconv"

	schedulerviews "github.com/mlb/mlb-ballpark-segregation-service/front_service/gen/scheduler/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeIndexResponse returns an encoder for responses returned by the
// Scheduler index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*schedulerviews.Schedule)
		enc := encoder(ctx, w)
		body := NewIndexResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexRequest returns a decoder for requests sent to the Scheduler
// index endpoint.
func DecodeIndexRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   uint
			date string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		date = r.URL.Query().Get("date")
		if date == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("date", "query string"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("date", date, goa.FormatDate))

		if err != nil {
			return nil, err
		}
		payload := NewIndexPayload(id, date)

		return payload, nil
	}
}

// EncodeIndexError returns an encoder for errors returned by the index
// Scheduler endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "bad_gateway":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSchedulerviewsDateViewToDateResponseBody builds a value of type
// *DateResponseBody from a value of type *schedulerviews.DateView.
func marshalSchedulerviewsDateViewToDateResponseBody(v *schedulerviews.DateView) *DateResponseBody {
	if v == nil {
		return nil
	}
	res := &DateResponseBody{
		Date:                 v.Date,
		TotalItems:           v.TotalItems,
		TotalEvents:          v.TotalEvents,
		TotalGames:           v.TotalGames,
		TotalGamesInProgress: v.TotalGamesInProgress,
	}
	if v.Games != nil {
		res.Games = make([]*GameResponseBody, len(v.Games))
		for i, val := range v.Games {
			res.Games[i] = marshalSchedulerviewsGameViewToGameResponseBody(val)
		}
	}
	if v.Events != nil {
		res.Events = make([]interface{}, len(v.Events))
		for i, val := range v.Events {
			res.Events[i] = val
		}
	}

	return res
}

// marshalSchedulerviewsGameViewToGameResponseBody builds a value of type
// *GameResponseBody from a value of type *schedulerviews.GameView.
func marshalSchedulerviewsGameViewToGameResponseBody(v *schedulerviews.GameView) *GameResponseBody {
	res := &GameResponseBody{
		GamePk:                 v.GamePk,
		Link:                   v.Link,
		GameType:               v.GameType,
		Season:                 v.Season,
		GameDate:               v.GameDate,
		OfficialDate:           v.OfficialDate,
		IsTie:                  v.IsTie,
		GameNumber:             v.GameNumber,
		PublicFacing:           v.PublicFacing,
		DoubleHeader:           v.DoubleHeader,
		GamedayType:            v.GamedayType,
		Tiebreaker:             v.Tiebreaker,
		CalendarEventID:        v.CalendarEventID,
		SeasonDisplay:          v.SeasonDisplay,
		DayNight:               v.DayNight,
		ScheduledInnings:       v.ScheduledInnings,
		ReverseHomeAwayStatus:  v.ReverseHomeAwayStatus,
		InningBreakLength:      v.InningBreakLength,
		GamesInSeries:          v.GamesInSeries,
		SeriesGameNumber:       v.SeriesGameNumber,
		SeriesDescription:      v.SeriesDescription,
		RecordSource:           v.RecordSource,
		IfNecessary:            v.IfNecessary,
		IfNecessaryDescription: v.IfNecessaryDescription,
	}
	if v.Status != nil {
		res.Status = marshalSchedulerviewsStatusViewToStatusResponseBody(v.Status)
	}
	if v.Teams != nil {
		res.Teams = marshalSchedulerviewsTeamsViewToTeamsResponseBody(v.Teams)
	}
	if v.Venue != nil {
		res.Venue = marshalSchedulerviewsVenueViewToVenueResponseBody(v.Venue)
	}
	if v.Content != nil {
		res.Content = marshalSchedulerviewsContentViewToContentResponseBody(v.Content)
	}

	return res
}

// marshalSchedulerviewsStatusViewToStatusResponseBody builds a value of type
// *StatusResponseBody from a value of type *schedulerviews.StatusView.
func marshalSchedulerviewsStatusViewToStatusResponseBody(v *schedulerviews.StatusView) *StatusResponseBody {
	if v == nil {
		return nil
	}
	res := &StatusResponseBody{
		AbstractGameState: v.AbstractGameState,
		CodedGameState:    v.CodedGameState,
		DetailedState:     v.DetailedState,
		StatusCode:        v.StatusCode,
		StartTimeTBD:      v.StartTimeTBD,
		AbstractGameCode:  v.AbstractGameCode,
	}

	return res
}

// marshalSchedulerviewsTeamsViewToTeamsResponseBody builds a value of type
// *TeamsResponseBody from a value of type *schedulerviews.TeamsView.
func marshalSchedulerviewsTeamsViewToTeamsResponseBody(v *schedulerviews.TeamsView) *TeamsResponseBody {
	if v == nil {
		return nil
	}
	res := &TeamsResponseBody{}
	if v.Away != nil {
		res.Away = marshalSchedulerviewsTeamInfoViewToTeamInfoResponseBody(v.Away)
	}
	if v.Home != nil {
		res.Home = marshalSchedulerviewsTeamInfoViewToTeamInfoResponseBody(v.Home)
	}

	return res
}

// marshalSchedulerviewsTeamInfoViewToTeamInfoResponseBody builds a value of
// type *TeamInfoResponseBody from a value of type *schedulerviews.TeamInfoView.
func marshalSchedulerviewsTeamInfoViewToTeamInfoResponseBody(v *schedulerviews.TeamInfoView) *TeamInfoResponseBody {
	if v == nil {
		return nil
	}
	res := &TeamInfoResponseBody{
		Score:        v.Score,
		IsWinner:     v.IsWinner,
		SplitSquad:   v.SplitSquad,
		SeriesNumber: v.SeriesNumber,
	}
	if v.LeagueRecord != nil {
		res.LeagueRecord = marshalSchedulerviewsLeagueRecordViewToLeagueRecordResponseBody(v.LeagueRecord)
	}
	if v.Team != nil {
		res.Team = marshalSchedulerviewsTeamViewToTeamResponseBody(v.Team)
	}

	return res
}

// marshalSchedulerviewsLeagueRecordViewToLeagueRecordResponseBody builds a
// value of type *LeagueRecordResponseBody from a value of type
// *schedulerviews.LeagueRecordView.
func marshalSchedulerviewsLeagueRecordViewToLeagueRecordResponseBody(v *schedulerviews.LeagueRecordView) *LeagueRecordResponseBody {
	if v == nil {
		return nil
	}
	res := &LeagueRecordResponseBody{
		Wins:   v.Wins,
		Losses: v.Losses,
		Pct:    v.Pct,
	}

	return res
}

// marshalSchedulerviewsTeamViewToTeamResponseBody builds a value of type
// *TeamResponseBody from a value of type *schedulerviews.TeamView.
func marshalSchedulerviewsTeamViewToTeamResponseBody(v *schedulerviews.TeamView) *TeamResponseBody {
	if v == nil {
		return nil
	}
	res := &TeamResponseBody{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// marshalSchedulerviewsVenueViewToVenueResponseBody builds a value of type
// *VenueResponseBody from a value of type *schedulerviews.VenueView.
func marshalSchedulerviewsVenueViewToVenueResponseBody(v *schedulerviews.VenueView) *VenueResponseBody {
	if v == nil {
		return nil
	}
	res := &VenueResponseBody{
		ID:   v.ID,
		Name: v.Name,
		Link: v.Link,
	}

	return res
}

// marshalSchedulerviewsContentViewToContentResponseBody builds a value of type
// *ContentResponseBody from a value of type *schedulerviews.ContentView.
func marshalSchedulerviewsContentViewToContentResponseBody(v *schedulerviews.ContentView) *ContentResponseBody {
	if v == nil {
		return nil
	}
	res := &ContentResponseBody{
		Link: v.Link,
	}

	return res
}
